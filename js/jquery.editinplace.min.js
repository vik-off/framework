/*
	jQuery plugin "editinplace"
	made by Yurij Novikov
*/

(function($){
	
	$.fn.editinplace = function(options){
			
		// создание уникального идентификатора
		if(typeof $.fn.editinplace.counter == 'undefined')
			$.fn.editinplace.counter = 0;
		else
			$.fn.editinplace.counter++;
		var identifier = $.fn.editinplace.counter;
		
		// инициализация хранилища данных
		if(typeof $.fn.editinplace.storage == 'undefined')
			$.fn.editinplace.storage = [];
		$.fn.editinplace.storage[identifier] = {};
		
		// стандартные опции плагина
		var stdOptions = {
			groups : '',
			allButtons: '',
			stretchInputs: true,
			enableClickEditing: true,
			showControlIcons: true,
			maxCols: 80,
			maxRows: 30,
			maxSize: 80,
			inputTypes: {
				'editinplace-type-textarea': {input: $('<textarea name="editinplace" class="editinplace-textarea"></textarea>')},
			},
			inputDefaultType: {input: $('<input type="text" name="editinplace" class="editinplace-input" />')},
			
			getValue: function(elm){
				return elm.val();
			},
			beforeSave: function(value, inp){},
			afterSave: function(data, inp){
				if(data.message)
					alert(data.message);
				if(data.error)
					alert('Ошибка сохранения:\n' + data.error);
				else
					inp.data('parent').html(data.value);
			}
		};
		// склеивание стандартных и назначенных типов инпутов
		options.inputTypes = $.extend(stdOptions.inputTypes, options.inputTypes || {});
		for(type in options.inputTypes)
			if(typeof options.inputTypes[type].input == 'undefined')
				options.inputTypes[type].input = type;
		
		if(options.inputDefaultType && typeof options.inputDefaultType.input == 'undefined')
			options.inputDefaultType.input = options.inputDefaultType.input;
				
		// склеивание всех опций плагина
		options = $.extend(stdOptions, options);
		options.pluginSelector = this.selector;
		
		// запись опций в хранилище
		$.fn.editinplace.storage[identifier].options = options;
		var storage = $.fn.editinplace.storage[identifier];
		
		getOption = function(optionName, identifier){
			return $.fn.editinplace.storage[identifier].options[optionName];
		}
		
		// ФУНКЦИЯ РАСТЯГИВАНИЯ ИНПУТА ИЛИ ТЕКСТАРИИ
		stretchInput = function(inp){
			
			// для input
			if(inp.tagName.toLowerCase() == 'input'){
				var size = inp.value.length + 1;
				inp.size = size > options.maxSize ? options.maxSize : size;
			}
			
			// для textarea
			if(inp.tagName.toLowerCase() == 'textarea'){
				var rows = inp.value.split('\n');
				var numrows = rows.length;
				var numcols = 0;
				for(var i = 0; i < rows.length; i++){
					if(rows[i].length > numcols)
						numcols = rows[i].length;
					if(rows[i].length > options.maxCols)
						numrows += Math.ceil(rows[i].length / options.maxCols) - 1
				}
				inp.rows = (numrows > options.maxRows ? options.maxRows : numrows) + 2;
				inp.cols = (numcols > options.maxCols ? options.maxCols : numcols) + 5;
			}
		}
		
		
		// ФУНКЦИЯ СОЗДАНИЯ ИНПУТА
		createInput = function(elm){
			
			var identifier = elm.data('identifier');
			
			// контейнер инпута
			var box = $('<div class="editinplace-box" style="display: inline-block;"></div>');
			
			// label инпута
			if(elm.attr('title')){
				$('<label class="editinplace-label">' + elm.attr('title') + '</label><br />').prependTo(box);
			}
			
			var inp, inpClass;
			
			// создание инпута в зависимости от класса
			for(className in getOption('inputTypes', identifier)){
				if(elm.hasClass(className)){
					inp = getOption('inputTypes', identifier)[className].input.clone();
					// alert('curType: (' + className + ') ' + print_r(getOption('inputTypes', identifier)[className], 1));
					inpClass = className;
					break;
				}
			}
			// создание стандартного инпута
			if(!inp){
				inp = getOption('inputDefaultType', identifier).input.clone();
				inpClass = '';
			}
			
			inp.data('parent', elm);
			elm.data('input', inp);
			inp.appendTo(box);
			
			// создание управляющих иконок для каждого инпута (если необходимо)
			if(getOption('showControlIcons', identifier)){
				$('<a href="#" class="editinplace-icon-apply" title="Применить">✔</a>')
					.data('input', inp)
					.click(function(){
						$(this).data('input').get(0).save();
						return false;
					})
					.appendTo(box);
					
				$('<a href="#" class="editinplace-icon-cancel" title="Отмена">✘</a>')
					.data('input', inp)
					.click(function(){
						$(this).data('input').get(0).cancel();
						return false;
					})
					.appendTo(box);
			}
			
			elm.after(box);
			
			// СКРЫТЬ ИНПУТ, ПОКАЗАТЬ ТЕКСТ метод добавляется каждому инпуту
			inp.get(0).hide = function(){
			
				var elm = $(this);
				
				if(elm.data('state') == 'view')
					return false;
				
				elm.data('state', 'view')
				elm.parent().css('display', 'none');
				elm.data('parent')
					.data('state', 'view')
					.show();
				if(elm.data('parent').data('group')){
					elm.data('parent').data('group').get(0).countEditing--;
					elm.data('parent').data('group').get(0).checkEditing();
				}
				if(elm.data('parent').data('forAll')){
					elm.data('parent').data('forAll').get(0).countEditing--;
					elm.data('parent').data('forAll').get(0).checkEditing();
				}
				return true;
			}
			
			// СОХРАНИТЬ, СКРЫТЬ ИНПУТ, ПОКАЗАТЬ ТЕКСТ метод добавляется каждому инпуту
			inp.get(0).save = function(){
				
				// экземпляр инпута
				var elm = $(this);
				var identifier = elm.data('parent').data('identifier');
				
				if(elm.data('state') == 'view')
					return false;
				
				// СОХРАНЕНИЕ ИНФОРМАЦИИ
				var sendToServer = true;
				var value;
				
				// получение значения для сохранения
				if(inpClass && typeof(getOption('inputTypes', identifier)[inpClass].getValue) == 'function'){
					value = getOption('inputTypes', identifier)[inpClass].getValue(elm);
				}else{
					value = getOption('getValue', identifier)(elm);
				}
				
				// получение URL для отправки данных
				var url = elm.data('parent').attr(getOption('enableClickEditing', identifier) ? 'href' : 'rel');
				
				// если значение не изменилось, то не отправляем данные
				if(value == elm.data('parent').data('startVal'))
					sendToServer = false;
				
				// если не указан URL, то не отправляем данные
				if(!url.length){
					sendToServer = false;
					alert('Ошибка отправки данных на сервер. Адрес не указан.');
				}
				
				// вызов пользовательского обработчика событий beforeSave(value, elm)
				// если обработчик вернул false, то не отправляем данные
				if(inpClass && typeof(getOption('inputTypes', identifier)[inpClass].beforeSave) == 'function'){
					if(getOption('inputTypes', identifier)[inpClass].beforeSave(value, elm) == false)
						sendToServer = false;
				}else if(typeof(getOption('beforeSave', identifier)) == 'function'){
					if(getOption('beforeSave', identifier)(value, elm) == false)
						sendToServer = false;
				}
				
				// если отправка данных на сервер нужна, она производится методом GET
				if(sendToServer){
					$.get(url, {value: value}, function(data){
						try{
							// данные ожидаются в формате json
							eval('data=' + data + ';');
							if(typeof data != 'object'){
								alert('Ответ сервера:\n' + data);
								return;
							}
							// вызов пользовательского обработчика событий afterSave(data)
							// если обработчик вернул false, то не выполняем стандартных действий
							if(inpClass && typeof(getOption('inputTypes', identifier)[inpClass].afterSave) == 'function'){
								getOption('inputTypes', identifier)[inpClass].afterSave(data, elm);
							}else if(typeof(getOption('afterSave', identifier)) == 'function'){
								getOption('afterSave', identifier)(data, elm);
							}
						}catch(e){
							alert('Ошибка распознавания данных:\n' + e + '\n\nОтвет сервера:\n' + data);
						}
					});
				}
				
				this.hide();
			}
			
			// ОТМЕНА, СКРЫТЬ ИНПУТ, ПОКАЗАТЬ ТЕКСТ метод добавляется каждому инпуту
			inp.get(0).cancel = function(){
				this.hide();
			}
			
			// ОТМЕНА ПРИ НАЖАТИИ НА ESC метод добавляется каждому инпуту
			inp.keydown(function(e){
				if(e.keyCode == 27)
					this.cancel();
			});
			
			var inpType = inp.get(0).tagName.toLowerCase();

			// ОТПРАВКА TEXTAREA НАЖАТИЕМ CTRL + ENTER
			if(inpType == 'textarea'){
				inp.keyup(function(e){
					if(options.stretchInputs)
						stretchInput(this);
					if(e.ctrlKey && (e.keyCode == 10 || e.keyCode == 13))
						this.save();
				});
			}
			
			// ОТПРАВКА SELECT ПРИ ИЗМЕНЕНИИ
			if(inpType == 'select'){
				inp.change(function(e){
					this.save();
				});
			}
			
			// ОТПРАВКА INPUT
			if(inpType == 'input'){

				switch(inp.attr('type').toLowerCase()){
					
					// ОТПРАВКА INPUT TYPE=TEXT НАЖАТИЕМ ENTER
					case 'text': case 'password':
					
						inp.keyup(function(e){
							if(options.stretchInputs)
								stretchInput(this);
							if(e.keyCode == 13)
								this.save();
						});
						break;
						
					// ОТПРАВКА INPUT TYPE=CHECKBOX ПРИ ИЗМЕНЕНИИ
					case 'checkbox':
						inp.change(function(){
							this.save();
						});
						break;
				}
			}
			
			return inp;
		}
		
		// ОБРАБОТКА ВСЕХ EDITINPLACE ЭЛЕМЕНТОВ
		this.each(function(){
			
			var elm = $(this);
			
			elm.data('identifier', identifier);
			
			// кнопки сохранить/редактировать все
			if(getOption('allButtons', identifier).length){
			
				var allButtonsBox = $(getOption('allButtons', identifier));
				elm.data('forAll', allButtonsBox);
				
				if(!allButtonsBox.get(0).checkEditing){
					allButtonsBox.get(0).checkEditing = function(){
						var id = $(this).attr('id');
						if(this.countEditing){
							$('#' + id + '-edit').hide();
							$('#' + id + '-save').show();
						}else{
							$('#' + id + '-edit').show();
							$('#' + id + '-save').hide();
						}
					}
					allButtonsBox.get(0).countEditing = 0;
				}
			}
			
			// группы
			if(getOption('groups', identifier).length){
			
				var elmgroup = elm.parents(getOption('groups', identifier));
				if(elmgroup.length == 1){
				
					elm.data('group', elmgroup);
					
					if(!elmgroup.get(0).checkEditing){
						elmgroup.get(0).checkEditing = function(){
							var id = $(this).attr('id');
							if(this.countEditing){
								$('#' + id + '-edit').hide();
								$('#' + id + '-save').show();
							}else{
								$('#' + id + '-edit').show();
								$('#' + id + '-save').hide();
							}
						}
						elmgroup.get(0).countEditing = 0;
					}
					
				}else if(elmgroup.length > 1){
					alert('Ошибка плагина editinplace. Один из элементов помещен в более чем один (' + elmgroup.length + ') контейнер группы'); 
				}
			}
			
			// ИНИЦИАЛИЗАЦИЯ EDITINPLACE
			this.editinplace = function(){
			
				var elm = $(this);
				
				if(elm.data('state') == 'edit')
					return false;
				
				// если инпут еще не создан - он создается
				var inp = elm.data('input') ? elm.data('input') : createInput(elm);
				inp.parent().css('display', 'inline-block');
				
				var startVal = elm.html();
				elm.data('startVal', startVal);
				inp.val(startVal);
				if(getOption('stretchInputs', identifier))
					stretchInput(inp.get(0));
					
				elm.data('state', 'edit');
				inp.data('state', 'edit');
				
				if(elm.data('group')){
					elm.data('group').get(0).countEditing++;
					elm.data('group').get(0).checkEditing();
				}
				if(elm.data('forAll')){
					elm.data('forAll').get(0).countEditing++;
					elm.data('forAll').get(0).checkEditing();
				}
					
				elm.hide();
			};
			
			// КЛИК ПО EDITINPLACE
			if(options.enableClickEditing){
				$(this).click(function(){
					this.editinplace();
					return false;
				});
			}
			
			if(elm.data('group'))
				elm.data('group').get(0).checkEditing();
			
			if(elm.data('forAll'))
				elm.data('forAll').get(0).checkEditing();
			
		});
		
		if(getOption('groups', identifier).length){
		
			// кнопки "редактировать группу"
			$(getOption('groups', identifier) + '-edit').click(function(){
				$('#' + $(this).attr('id').replace('-edit', '')).find(getOption('pluginSelector', identifier)).each(function(){
					this.editinplace();
				});
				return false;
			});
			
			// кнопки "сохранить группу"
			$(getOption('groups', identifier) + '-save').click(function(){
				$('#' + $(this).attr('id').replace('-save', '')).find(getOption('pluginSelector', identifier)).each(function(){
					if($(this).data('input'))
						$(this).data('input').get(0).save();
				});
				return false;
			});
		}
		
		if(getOption('allButtons', identifier).length){
		
			// кнопка "редактировать все"
			$(getOption('allButtons', identifier) + '-edit').click(function(){
				$(getOption('pluginSelector', identifier)).each(function(){
					this.editinplace();
				});
				return false;
			});

			// кнопка "сохранить все"
			$(getOption('allButtons', identifier) + '-save').click(function(){
				$(getOption('pluginSelector', identifier)).each(function(){
					if($(this).data('input'))
						$(this).data('input').get(0).save();
				});
				return false;
			});
		}
	}
	
})(jQuery);